#This code is for U-test, a non-parametric equivalent of a t-test. While there are existing functions on R for this test, this function can deal with ties.
#The function takes a vector for argument 1 and 2. Each for samples of two independent groups. The 3rd argument is where number of iteration is specified. 
#The 4th argument takes "one" and "two". as one-tailed and two-tailed tests respectively.
u.test = function(gp1,gp2, iteration=100000, tail="two"){
  counter1=0
  counter2=0
  for(i in 1:length(gp1)){
    for(j in 1:length(gp2)){
      if (gp1[i]<gp2[j]) {
        counter1=counter1+1
      }
      else if (gp1[i]==gp2[j]){   #dealing with ties, assign .5 to tied pairs  (ties.method="average")
        counter1=counter1+0.5
        counter2=counter2+0.5
      }
      else if (gp1[i]>gp2[j]){
        counter2=counter2+1
      }
    }
  }
  U = min(c(counter1,counter2))     #Chooses the smaller U
  
  Ucounter = c("counter1", "counter2")[c(counter1,counter2)==U] #specifying U group for permutation
  permU=c()
  for(l in 1:iteration){
    permpool= sample(c(gp1,gp2))
    permgp1= permpool[1:length(gp1)]
    permgp2= permpool[(length(gp1)+1):(length(gp1)+length(gp2))]
    counter1=0
    counter2=0
    for(i in 1:length(permgp1)){
      for(j in 1:length(permgp2)){
        if (permgp1[i]<permgp2[j]) {
          counter1=counter1+1
        }
        else if (permgp1[i]==permgp2[j]){
          counter1=counter1+0.5
          counter2=counter2+0.5
        }
        else if (permgp1[i]>permgp2[j]){
          counter2=counter2+1
        }
      }
    }
    permU[l] = eval(parse(text = Ucounter))
  }
  if(tail=="two"){
  print(sum(permU<=U)/iteration*2)
  }
  else if (tail =="one"){
  print(sum(permU<=U)/iteration)
  }
}



#This is an example data.
gp1 = c(1.0, 5.3, 1.2, 3.9, 8.3, 6.3, 2.2, 9.8, 2.8, 2.6 )      
gp2 = c(5.1, 6.0, 8.0, 8.2, 7.3 ,4.4 ,7.4, 7.5, 6.4, 4.5, 8.9 )
u.test(gp1,gp2)
